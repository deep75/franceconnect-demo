<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
						http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
						http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
						">


    <security:global-method-security
            pre-post-annotations="enabled" proxy-target-class="true"
            authentication-manager-ref="authenticationManager"/>


    <security:http pattern="/resources/**" security="none"/>

    <security:http auto-config="false" use-expressions="true" disable-url-rewriting="true"
                   entry-point-ref="authenticationEntryPoint" pattern="/**">
        <security:custom-filter before="PRE_AUTH_FILTER" ref="openIdConnectAuthenticationFilter"/>
        <security:logout/>
    </security:http>


    <bean id="authenticationEntryPoint"
          class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <property name="loginFormUrl" value="/openid_connect_login"/>
    </bean>

    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="openIdConnectAuthenticationProvider"/>
    </security:authentication-manager>


    <bean id="openIdConnectAuthenticationProvider"
          class="com.plec.artistes.security.CustomOIDCAuthenticationProvider"> <!-- Exemple pour donner des habilitations -->
    </bean>

    <!--
  -
  - The authentication filter
  -
  -->
    <!--<bean id="openIdConnectAuthenticationFilter" class="org.mitre.openid.connect.client.OIDCAuthenticationFilter">-->

    <!--surcharge historique car par défaut mitre demande que le fournisseur d'identité gère le paramètre nonce-->
    <!-- mais on a rétablit la conf qui vérifie le nonce -->
    <!-- il faudra réussir à enlever toute cette conf -->
    <bean id="openIdConnectAuthenticationFilter" class="com.plec.artistes.security.CustomOIDCAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager"/>

        <property name="issuerService" ref="staticIssuerService"/>
        <property name="serverConfigurationService" ref="staticServerConfiguration"/>
        <property name="clientConfigurationService" ref="staticClientConfigurationService"/>
        <property name="authRequestOptionsService" ref="staticAuthRequestOptionsService"/>
        <property name="authRequestUrlBuilder" ref="plainAuthRequestUrlBuilder"/>

    </bean>


    <!--
      -
      -	Issuer Services: Determine which identity provider issuer is used.
      -
      -->


    <!--
        Static issuer service, returns the same issuer for every request.
    -->
    <bean class="org.mitre.openid.connect.client.service.impl.StaticSingleIssuerService" id="staticIssuerService">
        <property name="issuer" value="http://fcp.integ01.dev-franceconnect.fr"/>
    </bean>


    <!--
  -
  - Server configuration: determines the parameters and URLs of the server to talk to.
  -
  -->

    <!--
        Static server configuration, contains a map of server configuration objects keyed by the issuer URL.
    -->
    <bean id="staticServerConfiguration"
          class="org.mitre.openid.connect.client.service.impl.StaticServerConfigurationService">
        <property name="servers">
            <map>
                <entry key="http://fcp.integ01.dev-franceconnect.fr">
                    <bean class="org.mitre.openid.connect.config.ServerConfiguration">
                        <property name="issuer" value="http://fcp.integ01.dev-franceconnect.fr"/>
                        <property name="authorizationEndpointUri"
                                  value="https://fcp.integ01.dev-franceconnect.fr/api/v1/authorize"/>
                        <property name="tokenEndpointUri" value="https://fcp.integ01.dev-franceconnect.fr/api/v1/token"/>
                        <property name="userInfoUri" value="https://fcp.integ01.dev-franceconnect.fr/api/v1/userinfo"/>
                        <property name="userInfoTokenMethod" value="HEADER"/>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>

    <!--
    Static Client Configuration. Configures a client statically by storing configuration on a per-issuer basis.
-->
    <!--
 <bean id="staticClientConfigurationService" class="org.mitre.openid.connect.client.service.impl.StaticClientConfigurationService" >
     <property name="clients">
         <map>
                 <entry key="http://fcp.integ01.dev-franceconnect.fr">

                  <bean class="org.mitre.oauth2.model.RegisteredClient">
                     <property name="clientId" value="34c64533186db4044adfa18482b0d108" />
                     <property name="clientSecret" value="e5b417328ccf40a6f404c8286a9914d5" />
                     <property name="scope">
                         <set value-type="java.lang.String">
                             <value>openid</value>
                             <value>profile</value>
                         </set>
                     </property>
                     <property name="tokenEndpointAuthMethod" value="" />
                     <property name="redirectUris">
                         <set>
                               <value>http://fsmitreid.dev.dev-franceconnect.fr/OpenIdFranceConnect/openid_connect_login</value>
                         </set>
                     </property>
                 </bean>
             </entry>
         </map>
       </property>
 </bean>    -->

    <bean id="staticClientConfigurationService"
          class="org.mitre.openid.connect.client.service.impl.StaticClientConfigurationService">
        <property name="clients">
            <map>
                <entry key="http://fcp.integ01.dev-franceconnect.fr">

                    <bean class="org.mitre.oauth2.model.RegisteredClient">
                        <property name="clientId" value="34c64533186db4044adfa18482b0d108"/>
                        <property name="clientSecret" value="e5b417328ccf40a6f404c8286a9914d5"/>
                        <property name="scope">
                            <set value-type="java.lang.String">
                                <value>openid</value>
                                <value>profile</value>
                            </set>
                        </property>
                        <property name="tokenEndpointAuthMethod" value=""/>
                        <property name="redirectUris">
                            <set>
                                <value>http://fsmitreid.dev.dev-franceconnect.fr/OpenIdFranceConnect/openid_connect_login</value>
                            </set>
                        </property>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>


    <!--
      -
      -	Auth request options service: returns the optional components of the request
      -
      -->
    <bean class="org.mitre.openid.connect.client.service.impl.StaticAuthRequestOptionsService"
          id="staticAuthRequestOptionsService">
        <property name="options">
            <map>
                <!-- Entries in this map are sent as key-value parameters to the auth request -->
            </map>
        </property>
    </bean>

    <!--
      -
      - Authorization URL Builders: create the URL to redirect the user to for authorization.
      -
      -->

    <!--
        Plain authorization request builder, puts all options as query parameters on the GET request
    -->
    <bean class="org.mitre.openid.connect.client.service.impl.PlainAuthRequestUrlBuilder"
          id="plainAuthRequestUrlBuilder"/>


    <!--
     -
     - Utility beans for the above classes
     -
     -->

    <!--
        This service fetches and caches JWK sets from URLs.
    -->

    <bean id="validatorCache" class="org.mitre.jwt.signer.service.impl.JWKSetCacheService"/>
</beans>